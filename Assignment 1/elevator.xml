<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
// constants and variable related to number of floors
const int N = 2;         // # floors
typedef int[0,N-1] id_f; // floor id from 0 to N-1

// Stolen definition from Floor declarations (above)
const int L = 3;         // # lifts
typedef int[0, L-1] id_e;// elevator ID from 0 to N-1

// cabin door channels and constants
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; // channels for a door
const int door_time = 2;     // time to open or close the door

// protecting door channels and constants
chan open_pdoor[id_f], close_pdoor[id_f], pdoor_open[id_f], pdoor_closed[id_f]; // channels for a door

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];

// floor sensors channels and constants
const int floor_time = 1; // time to travel one floor
chan start_sensors[id_e],stop_sensors[id_e],reach_floor[id_e];

// To ensure that passengers can get in and out before the doors close
int passenger_wait_time = 10;

// button channels
chan req[id_f];

// communications between RequestHandler and MainControl
chan go[id_e], served[id_e];

// Place global declarations here.

// The current floor of the elevator:
id_f current_floor = 0; 
// The floor to which the main control is requested to go to.
// This variable is just used for communication between the request handler and the main control.
// Therefore, we can declare it meta (i.e., not part of the state).
meta id_f target_floor;

</declaration>
	<template>
		<name>engine</name>
		<parameter>const id_e lift_id</parameter>
		<location id="id0" x="51" y="-212">
			<committed/>
		</location>
		<location id="id1" x="-306" y="-212">
			<committed/>
		</location>
		<location id="id2" x="-127" y="-83">
			<committed/>
		</location>
		<location id="id3" x="-306" y="-51">
			<name x="-410" y="-83">moving_down</name>
		</location>
		<location id="id4" x="51" y="-51">
			<name x="59" y="-83">moving_up</name>
		</location>
		<location id="id5" x="-127" y="-212">
			<name x="-137" y="-242">Idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="68" y="-153">start_sensors[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-297" y="-153">start_sensors[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-119" y="-153">stop_sensors[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-255" y="-51">stop[lift_id]?</label>
			<nail x="-127" y="-51"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-280" y="-238">move_down[lift_id]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-85" y="-51">stop[lift_id]?</label>
			<nail x="-127" y="-51"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-93" y="-238">move_up[lift_id]?</label>
		</transition>
	</template>
	<template>
		<name>button</name>
		<declaration>clock x;</declaration>
		<location id="id6" x="-32" y="-8">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="-48" y="-112">i : id_f</label>
			<label kind="guard" x="-48" y="-96">x &gt;=1</label>
			<label kind="synchronisation" x="-48" y="-80">req[i]!</label>
			<label kind="assignment" x="-48" y="-64">x=0</label>
			<nail x="-64" y="-48"/>
			<nail x="0" y="-48"/>
		</transition>
	</template>
	<template>
		<name>request_handler</name>
		<parameter>const int size, const id_e lift_id</parameter>
		<declaration>// The dummy request handler gets requests from the button.
// When these are received, they are stored in the following local variable.
id_f current_req;

// Before beginning with the assignment, you should take some time understand how a request is send from the button to the dummy request handler.
// This communication uses a parametrized channel "req". Basically, for each floor i there is a channel req[i].
// Another way of providing communication makes use of global variables.
// An example is the way the request handler sends a go signal to the main control.
// A global variable is used (target_floor, see "Declarations" of the project). When sending a go, the request handler puts a value into this global variable.
// When receiving a go, the main control takes this value and immediately sets it to zero. In UPPAAL, this is a very efficient way of encoding a synchronous communication.


// The dummy request handler can only deal with one request at a time.
// Only after the request has been served, a new request can be received.
// The first part of the task tells you how to build a FIFO request handler.
// This handler receives requests and stores them in a queue.
// The following code defines this queue.

// Local queue storing the requests.
id_f list[size];
int[0,size] len = 0;


// Put an element at the end of the queue
// Current allocation scheme is a FIFO
// might not be the smartest scheme but it ensures
// that all requests are served ...
// until the FIFO is full. Then it simply 
// ignores all requests. 
void enqueue(id_f element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}



// Returns the front element of the queue
id_f front()
{
   return list[0];
}

// Returns the last element of the queue
id_f last()
{
   return list[len - 1];
}

bool is_empty ()
{
	return len == 0;
}

bool is_full ()
{
	return len == size;
}</declaration>
		<location id="id7" x="-1513" y="-799">
		</location>
		<location id="id8" x="-1683" y="-799">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-1343" y="-867">i : id_f</label>
			<label kind="guard" x="-1343" y="-841">!is_full()</label>
			<label kind="synchronisation" x="-1343" y="-807">req[i]?</label>
			<label kind="assignment" x="-1343" y="-773">enqueue(i)</label>
			<nail x="-1377" y="-688"/>
			<nail x="-1377" y="-901"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-1657" y="-900">!is_empty()</label>
			<label kind="synchronisation" x="-1657" y="-875">go[lift_id]!</label>
			<label kind="assignment" x="-1657" y="-858">target_floor = front(), 
dequeue()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="select" x="-1904" y="-875">i : id_f</label>
			<label kind="guard" x="-1904" y="-841">!is_full()</label>
			<label kind="synchronisation" x="-1904" y="-807">req[i]?</label>
			<label kind="assignment" x="-1904" y="-773">enqueue(i)</label>
			<nail x="-1822" y="-696"/>
			<nail x="-1822" y="-900"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1615" y="-688">served[lift_id]?</label>
			<nail x="-1513" y="-697"/>
			<nail x="-1683" y="-697"/>
		</transition>
	</template>
	<template>
		<name>floor_sensors</name>
		<parameter>const id_e lift_id</parameter>
		<declaration>clock x;</declaration>
		<location id="id9" x="32" y="-24">
			<name x="40" y="-72">moving</name>
			<label kind="invariant" x="40" y="-56">x &lt;= floor_time</label>
		</location>
		<location id="id10" x="-200" y="-24">
			<name x="-264" y="-16">idle</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-120" y="-112">stop_sensors[lift_id]?</label>
			<nail x="32" y="-88"/>
			<nail x="-200" y="-88"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="136" y="-24">x &gt;= floor_time</label>
			<label kind="synchronisation" x="136" y="-8">reach_floor[lift_id]!</label>
			<label kind="assignment" x="136" y="8">x := 0</label>
			<nail x="128" y="-24"/>
			<nail x="128" y="32"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-128" y="-48">start_sensors[lift_id]?</label>
			<label kind="assignment" x="-104" y="-16">x := 0</label>
		</transition>
	</template>
	<template>
		<name>cabin_door</name>
		<parameter>const id_e lift_id</parameter>
		<declaration>clock x;</declaration>
		<location id="id11" x="-280" y="40">
			<committed/>
		</location>
		<location id="id12" x="152" y="40">
			<committed/>
		</location>
		<location id="id13" x="200" y="-232">
			<committed/>
		</location>
		<location id="id14" x="-280" y="-232">
			<committed/>
		</location>
		<location id="id15" x="200" y="-88">
			<name x="216" y="-96">closed</name>
		</location>
		<location id="id16" x="-96" y="-88">
			<name x="-80" y="-88">executing</name>
			<label kind="invariant" x="-80" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id17" x="-280" y="-88">
			<name x="-328" y="-96">open</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-264" y="48">pdoor_open[current_floor]?</label>
			<nail x="-104" y="40"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-56" y="48">open_pdoor[current_floor]!</label>
			<nail x="-80" y="40"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-32" y="-256">pdoor_closed[current_floor]?</label>
			<nail x="-80" y="-232"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-264" y="-256">close_pdoor[current_floor]!</label>
			<nail x="-104" y="-232"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="guard" x="-392" y="-48">x &gt;= door_time</label>
			<label kind="synchronisation" x="-416" y="-25">door_open[lift_id]!</label>
			<label kind="assignment" x="-340" y="-8">x := 0</label>
			<nail x="-280" y="-32"/>
			<nail x="-280" y="-48"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="208" y="-40">open_door[lift_id]?</label>
			<label kind="assignment" x="208" y="-16">x := 0</label>
			<nail x="200" y="40"/>
			<nail x="152" y="40"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="208" y="-184">x &gt;= door_time</label>
			<label kind="synchronisation" x="208" y="-168">door_closed[lift_id]!</label>
			<label kind="assignment" x="208" y="-152">x := 0</label>
			<nail x="200" y="-160"/>
			<nail x="200" y="-144"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-425" y="-187">close_door[lift_id]?</label>
			<label kind="assignment" x="-352" y="-168">x := 0</label>
			<nail x="-280" y="-160"/>
			<nail x="-280" y="-168"/>
		</transition>
	</template>
	<template>
		<name>lift_control</name>
		<parameter>const id_e lift_id</parameter>
		<declaration>id_f dest_floor = 1; // the current destination

// Whether the elevator should move up or down
int floors_to_travel = 0;

// To make sure that the elevator can wait for passengers to enter and exit
clock x;

// Update the floor based on the direction of travel
void update_floor_change(){
    // Calculate the direction the lift should be updated to and set value
    current_floor += current_floor &gt; dest_floor ? -1 : 1;

    // Update the floors that still need to be traversed
    floors_to_travel -= 1;
}</declaration>
		<location id="id18" x="-790" y="-42">
			<name x="-800" y="-76">choose_direction</name>
		</location>
		<location id="id19" x="-1181" y="-255">
			<name x="-1224" y="-289">wait_for_door</name>
		</location>
		<location id="id20" x="-1326" y="-255">
			<name x="-1360" y="-289">open_doors</name>
			<committed/>
		</location>
		<location id="id21" x="-577" y="-255">
			<name x="-552" y="-263">received_destination</name>
		</location>
		<location id="id22" x="-764" y="-255">
			<name x="-774" y="-245">idle</name>
		</location>
		<location id="id23" x="-1326" y="-42">
			<name x="-1360" y="-25">lift_stopped</name>
		</location>
		<location id="id24" x="-578" y="-42">
			<name x="-552" y="-51">closing_doors</name>
		</location>
		<location id="id25" x="-977" y="-255">
			<name x="-1020" y="-238">wait_for_passenger</name>
			<label kind="invariant" x="-1062" y="-289">x &lt;= passenger_wait_time</label>
			<label kind="comments" x="-1113" y="-314">Make sure passengers can enter and exit</label>
		</location>
		<location id="id26" x="-1054" y="-42">
			<name x="-1130" y="-85">change_floors</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id26"/>
			<target ref="id26"/>
			<label kind="guard" x="-1113" y="85">floors_to_travel &gt; 0</label>
			<label kind="synchronisation" x="-1113" y="68">reach_floor[lift_id]?</label>
			<label kind="assignment" x="-1113" y="102">update_floor_change()</label>
			<nail x="-986" y="68"/>
			<nail x="-1122" y="68"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="-1258" y="-42">floors_to_travel == 0</label>
			<label kind="synchronisation" x="-1241" y="-59">stop[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id26"/>
			<label kind="guard" x="-986" y="-110">dest_floor &lt; current_floor</label>
			<label kind="synchronisation" x="-986" y="-93">move_down[lift_id]!</label>
			<nail x="-841" y="-93"/>
			<nail x="-1003" y="-93"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id26"/>
			<label kind="guard" x="-986" y="17">dest_floor &gt; current_floor</label>
			<label kind="synchronisation" x="-986" y="0">move_up[lift_id]!</label>
			<nail x="-833" y="17"/>
			<nail x="-1003" y="17"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="guard" x="-960" y="-255">x &gt;= passenger_wait_time</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-1139" y="-255">door_open[lift_id]?</label>
			<label kind="assignment" x="-1113" y="-272">x := 0</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-747" y="-348">dest_floor == current_floor</label>
			<label kind="synchronisation" x="-697" y="-323">served[lift_id]!</label>
			<label kind="comments" x="-773" y="-374">Destination is the same as soruce</label>
			<nail x="-577" y="-323"/>
			<nail x="-764" y="-323"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-739" y="-42">door_closed[lift_id]?</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id24"/>
			<label kind="guard" x="-561" y="-170">dest_floor != current_floor</label>
			<label kind="synchronisation" x="-560" y="-153">close_door[lift_id]!</label>
			<label kind="assignment" x="-561" y="-128">floors_to_travel := 
abs(current_floor - dest_floor)</label>
			<label kind="comments" x="-357" y="-178">Calculate the length of direction to travel in.
Since the first flor needs to be reached, 
we need the absolute value to be used.
Regular target direction would be a problem 
if 1-0 = 1 (would go up otherwise).</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1317" y="-161">served[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-1309" y="-246">open_door[lift_id]!</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-696" y="-280">go[lift_id]?</label>
			<label kind="assignment" x="-739" y="-248">dest_floor := target_floor</label>
		</transition>
	</template>
	<template>
		<name>protecting_door</name>
		<parameter>id_f i</parameter>
		<declaration>clock x;</declaration>
		<location id="id27" x="-112" y="8">
			<name x="-144" y="24">executing_open</name>
			<label kind="invariant" x="-144" y="40">x &lt;= door_time</label>
		</location>
		<location id="id28" x="40" y="-96">
			<name x="56" y="-104">closed</name>
		</location>
		<location id="id29" x="-112" y="-120">
			<name x="-96" y="-120">executing</name>
			<label kind="invariant" x="-144" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id30" x="-232" y="-104">
			<name x="-280" y="-112">open</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id27"/>
			<target ref="id30"/>
			<label kind="guard" x="-352" y="-80">x &gt;= door_time</label>
			<label kind="synchronisation" x="-352" y="-64">pdoor_open[i]!</label>
			<label kind="assignment" x="-352" y="-48">x := 0</label>
			<nail x="-232" y="8"/>
			<nail x="-232" y="-80"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="48" y="-64">open_pdoor[i]?</label>
			<label kind="assignment" x="48" y="-32">x := 0</label>
			<nail x="40" y="-32"/>
			<nail x="40" y="8"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-88" y="-200">x &gt;= door_time</label>
			<label kind="synchronisation" x="-88" y="-184">pdoor_closed[i]!</label>
			<label kind="assignment" x="-88" y="-168">x := 0</label>
			<nail x="-96" y="-152"/>
			<nail x="40" y="-152"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-208" y="-192">close_pdoor[i]?</label>
			<label kind="assignment" x="-200" y="-168">x := 0</label>
			<nail x="-232" y="-152"/>
			<nail x="-128" y="-152"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// Allows for scalability of amount of possible requests
const int handler_size = 5;

// From https://stackoverflow.com/questions/68366786/declaration-of-multiple-processes-from-the-same-template-in-uppaal
bool var[id_e]; // Have to add one to adjust the amount of elevators
cabin_doors(const id_e id) = cabin_door(id); // cabin_door with argument lift id (0.. N-1)
engines(const id_e id) = engine(id); // engines with argument lift id (0.. N-1)
lift_controls(const id_e id) = lift_control(id); // engines with argument lift id (0.. N-1)

// List one or more processes to be composed into a system.
system cabin_doors, protecting_door, engines, floor_sensors, button, request_handlers, lift_controls; // instantiate P(1)..P(N) by filling the constant values from id_t range</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
