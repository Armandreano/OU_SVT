- ik vermoed dat deze opdracht veel tijd heeft gekost: je hebt het model veel meer uitgebreid dan nodig (of gevraagd). Ik zal mijn best doen om suggesties te geven om het model te verbeteren
- Je hebt queue_wait_time ingesteld op 30. Vraag je even af of dit een handige keuze is. Denk hierbij ook aan de theorie over region automata; wat is de consequentie van deze keuze? Denk aan wat de bedoeling is van deze constante: welke waarde van max_wait is "groot genoeg" in ons geval?
- Gebruik geen variabelen van type unbounded integer, die kunnen tot een gigantische state-space leiden. Als je echt een integer nodig hebt, dan probeer die als constante te declareren (bijv. passenger_wait_time is nu gewoon een int. En trouwens, het is niet nodig dat we op de personen wachten, dus dit deel kan weg en het model kan simpeler/sneller worden).
- ik weet niet zeker dat ik snap wat je doet met up_peak_floor: is dit bedoeld voor een mogelijke uitbreiding van het model?
- voor de channels van de protecting doors kan je direct 2D arrays declareren, dan bespaar je nog een stuk complexiteit
- je declareert target_floor als array. Maar hoeveel communicaties gebeuren tegelijkertijd op een go[..] channel? Omdat de waarde voor de gewenste verdieping doorgegeven wordt d.m.v. een enkele transitie ("value-passing" communicatie uit de UPPAAL tutorial), kunnen we ook gewoon maar 1 variabele gebruiken voor die waarde?
- in UPPAAL kan je aannemen dat alle variabelen en clocks beginnen met waarde 0, dus de "reset_current_floors()" is waarschijnlijk niet nodig
- ik snap niet waarom je een aparte DGC_request_handler hebt, en wat je doet met "are_lifts_occupied()". Let op (dit geldt in meerdere punten, ik zal het evt herhalen): een transitie wordt niet genomen op het eerst moment dat de guard waar is. Is het de bedoeling dat als alle lifts bezig zijn dan wacht je op geen request? Misschien kan je dit per lift doen: als een lift bezig is, dan ontvangt die lift geen request (impliciet is dus mijn suggestie om de lifts zelf de req's laten ontvangen, in het FIFO template: dan heb je een apart template niet nodig).

FIFO
- je model voldoet nog niet aan de eis: "Zodra de queue vol is, vertrekt de lift". Het feit dat een guard waar is betekent niet dat de transitie meteen wordt genomen. Dit is toch subtiel, maar probeer om te denken als je na een request kan bepalen of de queue vol is, en in dat geval direct reageren.
- je model voldoet nog niet aan de eis dat de lift vertrekt maximaal X secondes na het ontvangen van de eerste request. Let op: deze time out moet (pas) in gaan na het ontvangen van de eerste request. Ook hier: het feit dat een guard waar is betekent niet dat de transitie meteen wordt genomen.
- het template kan in principe in de locatie "emptying_queue" (en andere locaties) oneindig blijven, en dit willen we niet. Waarom, en hoe kan dit worden vermeden?
- over "wait_for_passenger": zoals gezegt, is dit per se niet nodig en kan verificatietijd kosten. Let ook op: zonder guard, zeg je dat je ten hoogste passenger_wait_time wacht, maar de lift kan ook bijv. 0 tijd wachten en direct doorgaan
- is_req_for_lift is nu moeilijk te testen. Probeer wat randgevallen te checken: bijvoorbeeld, het geval met 10 verdiepingen en 3 lifts is vaak "moeilijk" (ik krijg nu een fout met arrays als ik probeer deze instelling te gebruiken)

lift_control
- volgens de specificatie, zou "served!" moeten worden gestuurd nadat de deuren open zijn
- (dit commentaar ken je al :)) het template kan in principe in de locatie "received_destination" (en meerdere andere locaties) oneindig blijven, en dit willen we niet. Hoe kan dit worden vermeden?
- in de locatie "change_floors" kunnen we in principe nog floor_time time units wachten voordat een "stop!" wordt gestuurd. Waarom? Kan een "stop!" meteen na het bereiken van de juiste verdieping worden gestuurd?